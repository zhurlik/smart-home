plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'com.github.kt3k.coveralls'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'jacoco'
}

sourceSets {
    // So that we can place source code in 'src/integrationTest/java':
    integrationTest {
        java {

            // So that we can compile against the business classes (GreeterService, ...):
            compileClasspath += main.output
            // So that we can compile against the libs used by the business classes:
            compileClasspath += main.compileClasspath

            // So that we can compile against the unit test classes (custom utilities fx):
            compileClasspath += test.output
            // So that we can compile against the libs used by the unit test classes (JUnit, Spring test support, ...):
            compileClasspath += test.compileClasspath

            // So that test- and business classes can be used at runtime:
            runtimeClasspath += test.runtimeClasspath

        }
    }
}

configurations.integrationTestImplementation.setCanBeResolved(true)

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.+'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task integrationTest(dependsOn: project(':mqtt-broker').tasks.upDocker, type: Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

    // So that Gradle knows where the integration test classes are:
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    // So that Gradle knows which runtime class path to use:
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// integration tests
check.dependsOn integrationTest
integrationTest.mustRunAfter test
integrationTest.finalizedBy project(':mqtt-broker').tasks.stopDocker

// unit tests
test.dependsOn project(':mqtt-broker').tasks.upDocker
// test.finalizedBy project(':mqtt-broker').tasks.stopDocker

// To generate an HTML report instead of XML
tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required = false
        html.required = true
        html.outputLocation = file(layout.buildDirectory.dir('jacocoHtml'))
    }
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [ configurations.integrationTestImplementation ]
    }
}